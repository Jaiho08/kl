Insecure Storage of Aura Tokens

üìù Description:
Salesforce Aura framework tokens are being stored in the browser's local storage. Local storage is accessible via JavaScript and lacks built-in security features like HttpOnly or Secure flags. This makes it vulnerable to cross-site scripting (XSS) attacks.

‚ö†Ô∏è Impact:
An attacker exploiting an XSS vulnerability could steal the stored token, impersonate a legitimate user, gain unauthorized access to Salesforce data, and potentially perform malicious actions on behalf of the user.

‚úÖ Recommendation:
Avoid storing sensitive tokens like Aura tokens in local storage.

Use secure cookies and proper session handling instead






 Description:
The application fails to validate file extensions, content-type headers, and file content during uploads to the Chatter section. This allows malicious files (e.g., .html, .bat, .js) to be uploaded and shared using the platform‚Äôs share functionality or public links. The lack of restrictions creates a vector for malicious code execution or social engineering attacks.

‚ö†Ô∏è Impact:
Remote Code Execution (RCE): Uploading a .bat or .exe file could trick users into executing harmful scripts.

Cross-Site Scripting (XSS): Malicious HTML/JS files could be rendered in-browser, leading to session hijacking or phishing.

Social Engineering: Public links to disguised payloads could be sent to internal users or third parties.

Brand Damage & Data Breach: If exploited externally, could result in data exfiltration or reputational harm.

‚úÖ Remediation:
Validate file extensions: Restrict uploads to safe file types (e.g., .pdf, .docx, .png).

Check MIME types: Match the file‚Äôs content-type header to its extension and expected signature.

Perform deep content inspection: Detect and reject files containing embedded scripts or shell commands.

Disallow execution-capable file types: Block .html, .js, .bat, .exe, and similar high-risk files.

Sanitize shared links: Prevent execution or rendering of uploaded files via browser when shared.

