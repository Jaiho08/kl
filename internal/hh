Title: Unrestricted Update Function in Calculator App Leads to Resource Exhaustion and Denial of Service
üìù Description:
The calculator application exposes an update functionality that can be invoked without authentication or throttling mechanisms. An attacker can abuse this function by sending a high volume of requests (e.g., 60 or more) in quick succession. Since there is no rate-limiting or input validation, this leads to excessive database operations, which may overwhelm the backend and result in performance degradation or service unavailability.
This behavior can be exploited either intentionally (DoS attack) or unintentionally (malformed client logic), affecting the availability of the application to legitimate users.

Impact:
Denial of Service (DoS): Repeated update requests consume database resources, potentially crashing or slowing down the system for all users.

Increased Infrastructure Cost: Uncontrolled database writes may increase resource consumption (CPU, memory, IOPS), leading to higher cloud or hardware costs.

Race Conditions: Concurrent updates without locking mechanisms can lead to data inconsistency or corruption.

Missing Authentication/Authorization: If unauthenticated users can access the update function, this may be escalated into unauthorized data tampering.

Logging/Storage Bloat: Excessive updates may generate large volumes of logs or audit entries, consuming disk space and degrading system performance over time.
 Remediation:
Implement Rate Limiting:

Apply server-side throttling (e.g., max 5 requests per minute per IP/user) on the update endpoint.

Use middleware or Web Application Firewall (WAF) to enforce this limit.

Require Authentication:

Only allow authenticated users to access the update function.

Validate session tokens or use OAuth2/JWT-based mechanisms.

Add Input Validation:

Ensure only valid and necessary update operations are accepted.
  
