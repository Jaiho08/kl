ulnerability Report: No Rate Limiting on Query Creation Endpoint
üßæ Title
No Rate Limiting on Query Creation ‚Äì Allows Abuse via Automated Requests

üîç Description
After successful authentication, the application provides a "Queries" feature where users can create and submit queries. It was observed that this functionality does not implement any rate limiting, making it possible to send a high volume of automated requests using tools like Burp Suite Intruder without restriction.

By exploiting this lack of control, an attacker can rapidly generate queries at scale, potentially bypassing intended usage limits, consuming excessive server resources, or using the application in a way that was not intended by its business logic.

‚ö†Ô∏è Impact
The lack of rate limiting can lead to several issues:

Denial of Service (DoS): Excessive queries can degrade server performance or cause unavailability for legitimate users.

Abuse of Functionality: Users may bypass restrictions such as query limits per account tier (e.g., free vs. premium).

Increased Attack Surface: An attacker can brute force or enumerate query-based inputs/data rapidly, increasing the risk of further exploitation.

Billing or Infrastructure Impact: If backend resources (e.g., compute, DB queries) are linked to usage, this can result in financial loss or overage charges.

üõ†Ô∏è Recommendation
Implement appropriate rate limiting and throttling controls on the query creation endpoint:

Rate Limiting

Set thresholds (e.g., max 10 requests per minute per user/IP).

Use tools like API gateways, reverse proxies (e.g., NGINX, Cloudflare), or WAFs for enforcement.

Throttling with Exponential Backoff

Introduce delays when thresholds are exceeded to slow down abuse without full blocking.

Quota Management

Define business rules (e.g., free users can send X queries per day) and enforce them server-side.

Monitoring & Alerting

Monitor query activity and flag unusual behavior (e.g., rapid query bursts).

Log requests with user IDs and IP addresses for auditing.

User Feedback

Return appropriate HTTP status codes (e.g., 429 Too Many Requests) when limits are exceeded.

